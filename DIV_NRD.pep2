           .GLOBAL  DIV
;*******************************
;***Division (Quotient and Remainder) Subprogram***
;Divides using the Non-Restoring Division algorithm for 16 bit quantanties
;Note that this subprogram only deals with unsigned numbers and uses
;the SUBU and CMPU subprograms inorder to subtract and compare
;unsigned integers, so please include them in your main
;
;***Returns***
;The quotient in the a register
;The remainder in the x register
;
;NOTE! This program does not work! This is an off by one error
;when calculating the remainder! We used the following link as a 
;guide to implement this algorithm. There is debugging code to help show the
;problem.
;http://devel-rok.informatik.hu-berlin.de/svn/TI2/2006/folien/pdf/eng_ca12.pdf
;
;Author: Stefan Bossbaly, Hardik Patel, Zack Haupt, Pat Collins
;*******************************
;**Local Variables
M:         .WORD    0               ;Divisor
A:         .WORD    0               ;Double word Dividend
Q:         .WORD    0
divisor:   .EQUATE  2               ;Divisor location on the stack
dividedA:  .EQUATE  4               ;Double Dividend location on the stack
dividedQ:  .EQUATE  6
cycS:      .ASCII   "---Cycle Number: \x00"
subS:      .ASCII   "Subtracting... \n\x00"
negS:     .ASCII   "A is neg\n\x00"
posS:     .ASCII   "A is postive\n\x00"
shiftAQ:   .ASCII   "Shift AQ left\n\x00"

DIV:       MOVE     divisor,s,M,d   ;move the stack variable to M
           MOVE     dividedA,s,A,d  ;move the stack variable to A
           MOVE     dividedQ,s,Q,d  ;move the stack variable to Q
           BINO     M,d             ;Debugging only
           CHARO    '\n',i          ;Debugging only
           BINO     A,d             ;Debugging only
           CHARO    ' ',i           ;Debugging only
           BINO     Q,d             ;Debugging only
           CHARO    '\n',i          ;Debugging only
           LDX      0,i             ;init loop counter
           LDA      0,i             ;set carry to 0
           RORA                     ;
           LDA      Q,d             ;load Q into a
           ROLA                     ;roatate left so the MSB is in the carry bit and 0 is the LSB of Q
           STA      Q,d             ;store Q
           LDA      A,d             ;load A into a
           ROLA                     ;rotate left so the LSB of A is now MSB of Q
           STA      A,d             ;store a into A
           SUB      A,d,M,d         ;subtract M from A
           BINO     A,d             ;Debugging only
           CHARO    ' ',i           ;Debugging only
           BINO     Q,d             ;Debugging only
           CHARO    '\n',i          ;Debugging only
loop:      NOP0
           STRO     cycS,d          ;Debugging only
           DECOX                    ;Debugging only
           CHARO    '\n',i          ;Debugging only
           BINO     A,d             ;Debugging only
           CHARO    ' ',i           ;Debugging only
           BINO     Q,d             ;Debugging only
           CHARO    '\n',i          ;Debugging only
           CPM      A,d,0,i         ;compare A to 0
           BRLT     negA            ;branch if A is negative
           STRO     posS,d          ;Debugging only
           BINO     A,d             ;Debugging only
           CHARO    ' ',i           ;Debugging only
           BINO     Q,d             ;Debugging only
           CHARO    '\n',i          ;Debugging only
           LDA      1,i             ;set carry to 1
           RORA                     ;
           LDA      Q,d             ;load Q into a
           ROLA                     ;roatate left so the MSB is in the carry bit and 1 is the LSB of Q
           STA      Q,d             ;store Q
           LDA      A,d             ;load A into a
           ROLA                     ;rotate left so the LSB of A is now MSB of Q
           STA      A,d             ;store a into A
           BINO     A,d             ;Debugging only
           CHARO    ' ',i           ;Debugging only
           BINO     Q,d             ;Debugging only
           CHARO    '\n',i          ;Debugging only
           SUB      A,d,M,d         ;subtract M from A
           BINO     A,d             ;Debugging only
           CHARO    ' ',i           ;Debugging only
           BINO     Q,d             ;Debugging only
           CHARO    '\n',i          ;Debugging only
           BR       incr
negA:      NOP0
           STRO     negS,d          ;Debugging only
           BINO     A,d             ;Debugging only
           CHARO    ' ',i           ;Debugging only
           BINO     Q,d             ;Debugging only
           CHARO    '\n',i          ;Debugging only
           LDA      0,i             ;set carry to 0
           RORA                     ;
           LDA      Q,d             ;load Q into a
           ROLA                     ;roatate left so the MSB is in the carry bit and 0 is the LSB of Q
           STA      Q,d             ;store Q
           LDA      A,d             ;load A into a
           ROLA                     ;rotate left so the LSB of A is now MSB of Q
           STA      A,d             ;store a into A
           BINO     A,d             ;Debugging only
           CHARO    ' ',i           ;Debugging only
           BINO     Q,d             ;Debugging only
           CHARO    '\n',i          ;Debugging only
           ADD      A,d,M,d         ;A = A + M
           BINO     A,d             ;Debugging only
           CHARO    ' ',i           ;Debugging only
           BINO     Q,d             ;Debugging only
           CHARO    '\n',i          ;Debugging onl
incr:      CPX      15,i            ;compare count with n - 1
           BREQ     endLp           ;if (n - 1 == count) end
           INCX                     ;otherwise increment x
           BR       loop            ;loop
endLp:     CPM      A,d,0,i         ;compare A to 0
           BRGE     return          ;if (a >= 0) return
           ADD      A,d,M,d         ;A = A + M
return:    LDA      A,d             ;load A into a
           LDX      Q,d             ;load Q into x
           RET0                     ;return to calling program
