         .GLOBAL    CMPU

         .MACRO     CMPU     int1',ams1',int2',ams2'
         LDA        int2',ams2'                       ;load int2 into a
         STA        -2,s                              ;store int2 onto the stack
         LDA        int1',ams1'                       ;load int1 into a
         STA        -4,s                              ;store int1 onto the stack
         SUBSP      4,i                               ;update stack pointer now! (so we don't screw up addressing modes)
         CALL       CMPU                              ;call subroutine
         ADDSP      4,i                               ;reclaim memory
         .MACROEND
         
         .MACRO     CMPUA    int1',ams1'
         STA        -4,s                              ;load a onto stack
         LDA        int1',ams1'                       ;load int1 into a
         STA        -2,s                              ;store int1 onto the stack
         SUBSP      4,i                               ;update stack pointer now! (so we don't screw up addressing modes)
         CALL       CMPU                              ;call subroutine
         ADDSP      4,i                               ;reclaim memory
         .MACROEND

;*******************************************************************************************************************************
;***Compare Unsigned Ints***
;*******************************************************************************************************************************
;**Parameters
int1:    .EQUATE    2                                 ;first unsigned int
int2:    .EQUATE    4                                 ;second unsigned int
;**Local Variables
;*******************************************************************************************************************************
CMPU:    NOP0
         LDA        int1,s                            ;load int1 into a
         ROLA                                         ;rotate left
         BRC        cmpC                              ;if (MSB == 1) branch to compare carry
         LDA        int2,s                            ;else
         ROLA                                         ;rotate left
         BRC        sofCmp                            ;if (MSB != 1) do the sofCmp
         BR         shCmp                             ;do the short Cmp
cmpC:    LDA        int2,d                            ;loaf intw into a
         ROLA                                         ;rotate left
         BRC        shCmp                             ;if (MSB == 1) do the short Cmp
         BR         sofCmp                            ;if (MSB != 1) do the sofCmp
shCmp:   CPM        int1, s, int2, s                  ;compare int1 to int2
         BRGT       retGT                             ;if (int1 > int2) goto retGT
         BRLT       retLT                             ;if (int2 > int1) goto retLT
         BREQ       retEQ                             ;if (int1 == int2) goto retEQ
sofCmp:  LDA        int1,s                            ;load int1 into a
         ROLA                                         ;rotate left
         BRC        retGT                             ;if (MSB == 1) return 1
         BR         retLT                             ;else return -1
retGT:   LDA        1,i                               ;load 1
         RET0                                         ;return 1
retLT:   LDA        -1,i                              ;load -1
         RET0                                         ;return -1
retEQ:   LDA        0,i                               ;load 0
         RET0                                         ;return 0
